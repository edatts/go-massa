// Copyright (c) 2023 MASSA LABS <info@massa.net>

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: massa/api/v1/private.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PrivateService_AddToBootstrapBlacklist_FullMethodName      = "/massa.api.v1.PrivateService/AddToBootstrapBlacklist"
	PrivateService_AddToBootstrapWhitelist_FullMethodName      = "/massa.api.v1.PrivateService/AddToBootstrapWhitelist"
	PrivateService_AddToPeersWhitelist_FullMethodName          = "/massa.api.v1.PrivateService/AddToPeersWhitelist"
	PrivateService_AddStakingSecretKeys_FullMethodName         = "/massa.api.v1.PrivateService/AddStakingSecretKeys"
	PrivateService_AllowEveryoneToBootstrap_FullMethodName     = "/massa.api.v1.PrivateService/AllowEveryoneToBootstrap"
	PrivateService_GetBootstrapBlacklist_FullMethodName        = "/massa.api.v1.PrivateService/GetBootstrapBlacklist"
	PrivateService_GetBootstrapWhitelist_FullMethodName        = "/massa.api.v1.PrivateService/GetBootstrapWhitelist"
	PrivateService_GetMipStatus_FullMethodName                 = "/massa.api.v1.PrivateService/GetMipStatus"
	PrivateService_GetNodeStatus_FullMethodName                = "/massa.api.v1.PrivateService/GetNodeStatus"
	PrivateService_GetPeersWhitelist_FullMethodName            = "/massa.api.v1.PrivateService/GetPeersWhitelist"
	PrivateService_BanNodesByIds_FullMethodName                = "/massa.api.v1.PrivateService/BanNodesByIds"
	PrivateService_BanNodesByIps_FullMethodName                = "/massa.api.v1.PrivateService/BanNodesByIps"
	PrivateService_RemoveFromBootstrapBlacklist_FullMethodName = "/massa.api.v1.PrivateService/RemoveFromBootstrapBlacklist"
	PrivateService_RemoveFromBootstrapWhitelist_FullMethodName = "/massa.api.v1.PrivateService/RemoveFromBootstrapWhitelist"
	PrivateService_RemoveFromPeersWhitelist_FullMethodName     = "/massa.api.v1.PrivateService/RemoveFromPeersWhitelist"
	PrivateService_RemoveStakingAddresses_FullMethodName       = "/massa.api.v1.PrivateService/RemoveStakingAddresses"
	PrivateService_SignMessages_FullMethodName                 = "/massa.api.v1.PrivateService/SignMessages"
	PrivateService_ShutdownGracefully_FullMethodName           = "/massa.api.v1.PrivateService/ShutdownGracefully"
	PrivateService_UnbanNodesByIds_FullMethodName              = "/massa.api.v1.PrivateService/UnbanNodesByIds"
	PrivateService_UnbanNodesByIps_FullMethodName              = "/massa.api.v1.PrivateService/UnbanNodesByIps"
)

// PrivateServiceClient is the client API for PrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrivateServiceClient interface {
	// Add IP addresses to node bootstrap blacklist
	AddToBootstrapBlacklist(ctx context.Context, in *AddToBootstrapBlacklistRequest, opts ...grpc.CallOption) (*AddToBootstrapBlacklistResponse, error)
	// Add IP addresses to node bootstrap whitelist
	AddToBootstrapWhitelist(ctx context.Context, in *AddToBootstrapWhitelistRequest, opts ...grpc.CallOption) (*AddToBootstrapWhitelistResponse, error)
	// Add IP addresses to node peers whitelist. No confirmation to expect.
	// Note: If the ip was unknown it adds it to the known peers, otherwise it updates the peer type
	AddToPeersWhitelist(ctx context.Context, in *AddToPeersWhitelistRequest, opts ...grpc.CallOption) (*AddToPeersWhitelistResponse, error)
	// Add staking secret keys to wallet
	AddStakingSecretKeys(ctx context.Context, in *AddStakingSecretKeysRequest, opts ...grpc.CallOption) (*AddStakingSecretKeysResponse, error)
	// Allow everyone to bootstrap from the node by removing bootstrap whitelist configuration file
	AllowEveryoneToBootstrap(ctx context.Context, in *AllowEveryoneToBootstrapRequest, opts ...grpc.CallOption) (*AllowEveryoneToBootstrapResponse, error)
	// Get node bootstrap blacklist IP addresses
	GetBootstrapBlacklist(ctx context.Context, in *GetBootstrapBlacklistRequest, opts ...grpc.CallOption) (*GetBootstrapBlacklistResponse, error)
	// Get node bootstrap whitelist IP addresses
	GetBootstrapWhitelist(ctx context.Context, in *GetBootstrapWhitelistRequest, opts ...grpc.CallOption) (*GetBootstrapWhitelistResponse, error)
	// Get Mip status
	GetMipStatus(ctx context.Context, in *GetMipStatusRequest, opts ...grpc.CallOption) (*GetMipStatusResponse, error)
	// Get node status
	GetNodeStatus(ctx context.Context, in *GetNodeStatusRequest, opts ...grpc.CallOption) (*GetNodeStatusResponse, error)
	// Get node peers whitelist IP addresses
	GetPeersWhitelist(ctx context.Context, in *GetPeersWhitelistRequest, opts ...grpc.CallOption) (*GetPeersWhitelistResponse, error)
	// Ban multiple nodes by their individual ids
	BanNodesByIds(ctx context.Context, in *BanNodesByIdsRequest, opts ...grpc.CallOption) (*BanNodesByIdsResponse, error)
	// Ban multiple nodes by their individual IP addresses
	BanNodesByIps(ctx context.Context, in *BanNodesByIpsRequest, opts ...grpc.CallOption) (*BanNodesByIpsResponse, error)
	// Remove from bootstrap blacklist given IP addresses
	RemoveFromBootstrapBlacklist(ctx context.Context, in *RemoveFromBootstrapBlacklistRequest, opts ...grpc.CallOption) (*RemoveFromBootstrapBlacklistResponse, error)
	// Remove from bootstrap whitelist given IP addresses
	RemoveFromBootstrapWhitelist(ctx context.Context, in *RemoveFromBootstrapWhitelistRequest, opts ...grpc.CallOption) (*RemoveFromBootstrapWhitelistResponse, error)
	// Remove from peers whitelist given IP addresses
	RemoveFromPeersWhitelist(ctx context.Context, in *RemoveFromPeersWhitelistRequest, opts ...grpc.CallOption) (*RemoveFromPeersWhitelistResponse, error)
	// Remove addresses from staking
	RemoveStakingAddresses(ctx context.Context, in *RemoveStakingAddressesRequest, opts ...grpc.CallOption) (*RemoveStakingAddressesResponse, error)
	// Sign messages with node's key
	SignMessages(ctx context.Context, in *SignMessagesRequest, opts ...grpc.CallOption) (*SignMessagesResponse, error)
	// Shutdown the node gracefully
	ShutdownGracefully(ctx context.Context, in *ShutdownGracefullyRequest, opts ...grpc.CallOption) (*ShutdownGracefullyResponse, error)
	// Unban multiple nodes by their individual ids
	UnbanNodesByIds(ctx context.Context, in *UnbanNodesByIdsRequest, opts ...grpc.CallOption) (*UnbanNodesByIdsResponse, error)
	// Unban multiple nodes by their individual IP addresses
	UnbanNodesByIps(ctx context.Context, in *UnbanNodesByIpsRequest, opts ...grpc.CallOption) (*UnbanNodesByIpsResponse, error)
}

type privateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrivateServiceClient(cc grpc.ClientConnInterface) PrivateServiceClient {
	return &privateServiceClient{cc}
}

func (c *privateServiceClient) AddToBootstrapBlacklist(ctx context.Context, in *AddToBootstrapBlacklistRequest, opts ...grpc.CallOption) (*AddToBootstrapBlacklistResponse, error) {
	out := new(AddToBootstrapBlacklistResponse)
	err := c.cc.Invoke(ctx, PrivateService_AddToBootstrapBlacklist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) AddToBootstrapWhitelist(ctx context.Context, in *AddToBootstrapWhitelistRequest, opts ...grpc.CallOption) (*AddToBootstrapWhitelistResponse, error) {
	out := new(AddToBootstrapWhitelistResponse)
	err := c.cc.Invoke(ctx, PrivateService_AddToBootstrapWhitelist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) AddToPeersWhitelist(ctx context.Context, in *AddToPeersWhitelistRequest, opts ...grpc.CallOption) (*AddToPeersWhitelistResponse, error) {
	out := new(AddToPeersWhitelistResponse)
	err := c.cc.Invoke(ctx, PrivateService_AddToPeersWhitelist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) AddStakingSecretKeys(ctx context.Context, in *AddStakingSecretKeysRequest, opts ...grpc.CallOption) (*AddStakingSecretKeysResponse, error) {
	out := new(AddStakingSecretKeysResponse)
	err := c.cc.Invoke(ctx, PrivateService_AddStakingSecretKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) AllowEveryoneToBootstrap(ctx context.Context, in *AllowEveryoneToBootstrapRequest, opts ...grpc.CallOption) (*AllowEveryoneToBootstrapResponse, error) {
	out := new(AllowEveryoneToBootstrapResponse)
	err := c.cc.Invoke(ctx, PrivateService_AllowEveryoneToBootstrap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) GetBootstrapBlacklist(ctx context.Context, in *GetBootstrapBlacklistRequest, opts ...grpc.CallOption) (*GetBootstrapBlacklistResponse, error) {
	out := new(GetBootstrapBlacklistResponse)
	err := c.cc.Invoke(ctx, PrivateService_GetBootstrapBlacklist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) GetBootstrapWhitelist(ctx context.Context, in *GetBootstrapWhitelistRequest, opts ...grpc.CallOption) (*GetBootstrapWhitelistResponse, error) {
	out := new(GetBootstrapWhitelistResponse)
	err := c.cc.Invoke(ctx, PrivateService_GetBootstrapWhitelist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) GetMipStatus(ctx context.Context, in *GetMipStatusRequest, opts ...grpc.CallOption) (*GetMipStatusResponse, error) {
	out := new(GetMipStatusResponse)
	err := c.cc.Invoke(ctx, PrivateService_GetMipStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) GetNodeStatus(ctx context.Context, in *GetNodeStatusRequest, opts ...grpc.CallOption) (*GetNodeStatusResponse, error) {
	out := new(GetNodeStatusResponse)
	err := c.cc.Invoke(ctx, PrivateService_GetNodeStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) GetPeersWhitelist(ctx context.Context, in *GetPeersWhitelistRequest, opts ...grpc.CallOption) (*GetPeersWhitelistResponse, error) {
	out := new(GetPeersWhitelistResponse)
	err := c.cc.Invoke(ctx, PrivateService_GetPeersWhitelist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) BanNodesByIds(ctx context.Context, in *BanNodesByIdsRequest, opts ...grpc.CallOption) (*BanNodesByIdsResponse, error) {
	out := new(BanNodesByIdsResponse)
	err := c.cc.Invoke(ctx, PrivateService_BanNodesByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) BanNodesByIps(ctx context.Context, in *BanNodesByIpsRequest, opts ...grpc.CallOption) (*BanNodesByIpsResponse, error) {
	out := new(BanNodesByIpsResponse)
	err := c.cc.Invoke(ctx, PrivateService_BanNodesByIps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) RemoveFromBootstrapBlacklist(ctx context.Context, in *RemoveFromBootstrapBlacklistRequest, opts ...grpc.CallOption) (*RemoveFromBootstrapBlacklistResponse, error) {
	out := new(RemoveFromBootstrapBlacklistResponse)
	err := c.cc.Invoke(ctx, PrivateService_RemoveFromBootstrapBlacklist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) RemoveFromBootstrapWhitelist(ctx context.Context, in *RemoveFromBootstrapWhitelistRequest, opts ...grpc.CallOption) (*RemoveFromBootstrapWhitelistResponse, error) {
	out := new(RemoveFromBootstrapWhitelistResponse)
	err := c.cc.Invoke(ctx, PrivateService_RemoveFromBootstrapWhitelist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) RemoveFromPeersWhitelist(ctx context.Context, in *RemoveFromPeersWhitelistRequest, opts ...grpc.CallOption) (*RemoveFromPeersWhitelistResponse, error) {
	out := new(RemoveFromPeersWhitelistResponse)
	err := c.cc.Invoke(ctx, PrivateService_RemoveFromPeersWhitelist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) RemoveStakingAddresses(ctx context.Context, in *RemoveStakingAddressesRequest, opts ...grpc.CallOption) (*RemoveStakingAddressesResponse, error) {
	out := new(RemoveStakingAddressesResponse)
	err := c.cc.Invoke(ctx, PrivateService_RemoveStakingAddresses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) SignMessages(ctx context.Context, in *SignMessagesRequest, opts ...grpc.CallOption) (*SignMessagesResponse, error) {
	out := new(SignMessagesResponse)
	err := c.cc.Invoke(ctx, PrivateService_SignMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) ShutdownGracefully(ctx context.Context, in *ShutdownGracefullyRequest, opts ...grpc.CallOption) (*ShutdownGracefullyResponse, error) {
	out := new(ShutdownGracefullyResponse)
	err := c.cc.Invoke(ctx, PrivateService_ShutdownGracefully_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) UnbanNodesByIds(ctx context.Context, in *UnbanNodesByIdsRequest, opts ...grpc.CallOption) (*UnbanNodesByIdsResponse, error) {
	out := new(UnbanNodesByIdsResponse)
	err := c.cc.Invoke(ctx, PrivateService_UnbanNodesByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) UnbanNodesByIps(ctx context.Context, in *UnbanNodesByIpsRequest, opts ...grpc.CallOption) (*UnbanNodesByIpsResponse, error) {
	out := new(UnbanNodesByIpsResponse)
	err := c.cc.Invoke(ctx, PrivateService_UnbanNodesByIps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivateServiceServer is the server API for PrivateService service.
// All implementations should embed UnimplementedPrivateServiceServer
// for forward compatibility
type PrivateServiceServer interface {
	// Add IP addresses to node bootstrap blacklist
	AddToBootstrapBlacklist(context.Context, *AddToBootstrapBlacklistRequest) (*AddToBootstrapBlacklistResponse, error)
	// Add IP addresses to node bootstrap whitelist
	AddToBootstrapWhitelist(context.Context, *AddToBootstrapWhitelistRequest) (*AddToBootstrapWhitelistResponse, error)
	// Add IP addresses to node peers whitelist. No confirmation to expect.
	// Note: If the ip was unknown it adds it to the known peers, otherwise it updates the peer type
	AddToPeersWhitelist(context.Context, *AddToPeersWhitelistRequest) (*AddToPeersWhitelistResponse, error)
	// Add staking secret keys to wallet
	AddStakingSecretKeys(context.Context, *AddStakingSecretKeysRequest) (*AddStakingSecretKeysResponse, error)
	// Allow everyone to bootstrap from the node by removing bootstrap whitelist configuration file
	AllowEveryoneToBootstrap(context.Context, *AllowEveryoneToBootstrapRequest) (*AllowEveryoneToBootstrapResponse, error)
	// Get node bootstrap blacklist IP addresses
	GetBootstrapBlacklist(context.Context, *GetBootstrapBlacklistRequest) (*GetBootstrapBlacklistResponse, error)
	// Get node bootstrap whitelist IP addresses
	GetBootstrapWhitelist(context.Context, *GetBootstrapWhitelistRequest) (*GetBootstrapWhitelistResponse, error)
	// Get Mip status
	GetMipStatus(context.Context, *GetMipStatusRequest) (*GetMipStatusResponse, error)
	// Get node status
	GetNodeStatus(context.Context, *GetNodeStatusRequest) (*GetNodeStatusResponse, error)
	// Get node peers whitelist IP addresses
	GetPeersWhitelist(context.Context, *GetPeersWhitelistRequest) (*GetPeersWhitelistResponse, error)
	// Ban multiple nodes by their individual ids
	BanNodesByIds(context.Context, *BanNodesByIdsRequest) (*BanNodesByIdsResponse, error)
	// Ban multiple nodes by their individual IP addresses
	BanNodesByIps(context.Context, *BanNodesByIpsRequest) (*BanNodesByIpsResponse, error)
	// Remove from bootstrap blacklist given IP addresses
	RemoveFromBootstrapBlacklist(context.Context, *RemoveFromBootstrapBlacklistRequest) (*RemoveFromBootstrapBlacklistResponse, error)
	// Remove from bootstrap whitelist given IP addresses
	RemoveFromBootstrapWhitelist(context.Context, *RemoveFromBootstrapWhitelistRequest) (*RemoveFromBootstrapWhitelistResponse, error)
	// Remove from peers whitelist given IP addresses
	RemoveFromPeersWhitelist(context.Context, *RemoveFromPeersWhitelistRequest) (*RemoveFromPeersWhitelistResponse, error)
	// Remove addresses from staking
	RemoveStakingAddresses(context.Context, *RemoveStakingAddressesRequest) (*RemoveStakingAddressesResponse, error)
	// Sign messages with node's key
	SignMessages(context.Context, *SignMessagesRequest) (*SignMessagesResponse, error)
	// Shutdown the node gracefully
	ShutdownGracefully(context.Context, *ShutdownGracefullyRequest) (*ShutdownGracefullyResponse, error)
	// Unban multiple nodes by their individual ids
	UnbanNodesByIds(context.Context, *UnbanNodesByIdsRequest) (*UnbanNodesByIdsResponse, error)
	// Unban multiple nodes by their individual IP addresses
	UnbanNodesByIps(context.Context, *UnbanNodesByIpsRequest) (*UnbanNodesByIpsResponse, error)
}

// UnimplementedPrivateServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPrivateServiceServer struct {
}

func (UnimplementedPrivateServiceServer) AddToBootstrapBlacklist(context.Context, *AddToBootstrapBlacklistRequest) (*AddToBootstrapBlacklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBootstrapBlacklist not implemented")
}
func (UnimplementedPrivateServiceServer) AddToBootstrapWhitelist(context.Context, *AddToBootstrapWhitelistRequest) (*AddToBootstrapWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBootstrapWhitelist not implemented")
}
func (UnimplementedPrivateServiceServer) AddToPeersWhitelist(context.Context, *AddToPeersWhitelistRequest) (*AddToPeersWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToPeersWhitelist not implemented")
}
func (UnimplementedPrivateServiceServer) AddStakingSecretKeys(context.Context, *AddStakingSecretKeysRequest) (*AddStakingSecretKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStakingSecretKeys not implemented")
}
func (UnimplementedPrivateServiceServer) AllowEveryoneToBootstrap(context.Context, *AllowEveryoneToBootstrapRequest) (*AllowEveryoneToBootstrapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllowEveryoneToBootstrap not implemented")
}
func (UnimplementedPrivateServiceServer) GetBootstrapBlacklist(context.Context, *GetBootstrapBlacklistRequest) (*GetBootstrapBlacklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBootstrapBlacklist not implemented")
}
func (UnimplementedPrivateServiceServer) GetBootstrapWhitelist(context.Context, *GetBootstrapWhitelistRequest) (*GetBootstrapWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBootstrapWhitelist not implemented")
}
func (UnimplementedPrivateServiceServer) GetMipStatus(context.Context, *GetMipStatusRequest) (*GetMipStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMipStatus not implemented")
}
func (UnimplementedPrivateServiceServer) GetNodeStatus(context.Context, *GetNodeStatusRequest) (*GetNodeStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeStatus not implemented")
}
func (UnimplementedPrivateServiceServer) GetPeersWhitelist(context.Context, *GetPeersWhitelistRequest) (*GetPeersWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeersWhitelist not implemented")
}
func (UnimplementedPrivateServiceServer) BanNodesByIds(context.Context, *BanNodesByIdsRequest) (*BanNodesByIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanNodesByIds not implemented")
}
func (UnimplementedPrivateServiceServer) BanNodesByIps(context.Context, *BanNodesByIpsRequest) (*BanNodesByIpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanNodesByIps not implemented")
}
func (UnimplementedPrivateServiceServer) RemoveFromBootstrapBlacklist(context.Context, *RemoveFromBootstrapBlacklistRequest) (*RemoveFromBootstrapBlacklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromBootstrapBlacklist not implemented")
}
func (UnimplementedPrivateServiceServer) RemoveFromBootstrapWhitelist(context.Context, *RemoveFromBootstrapWhitelistRequest) (*RemoveFromBootstrapWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromBootstrapWhitelist not implemented")
}
func (UnimplementedPrivateServiceServer) RemoveFromPeersWhitelist(context.Context, *RemoveFromPeersWhitelistRequest) (*RemoveFromPeersWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromPeersWhitelist not implemented")
}
func (UnimplementedPrivateServiceServer) RemoveStakingAddresses(context.Context, *RemoveStakingAddressesRequest) (*RemoveStakingAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStakingAddresses not implemented")
}
func (UnimplementedPrivateServiceServer) SignMessages(context.Context, *SignMessagesRequest) (*SignMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignMessages not implemented")
}
func (UnimplementedPrivateServiceServer) ShutdownGracefully(context.Context, *ShutdownGracefullyRequest) (*ShutdownGracefullyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownGracefully not implemented")
}
func (UnimplementedPrivateServiceServer) UnbanNodesByIds(context.Context, *UnbanNodesByIdsRequest) (*UnbanNodesByIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbanNodesByIds not implemented")
}
func (UnimplementedPrivateServiceServer) UnbanNodesByIps(context.Context, *UnbanNodesByIpsRequest) (*UnbanNodesByIpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbanNodesByIps not implemented")
}

// UnsafePrivateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrivateServiceServer will
// result in compilation errors.
type UnsafePrivateServiceServer interface {
	mustEmbedUnimplementedPrivateServiceServer()
}

func RegisterPrivateServiceServer(s grpc.ServiceRegistrar, srv PrivateServiceServer) {
	s.RegisterService(&PrivateService_ServiceDesc, srv)
}

func _PrivateService_AddToBootstrapBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToBootstrapBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).AddToBootstrapBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateService_AddToBootstrapBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).AddToBootstrapBlacklist(ctx, req.(*AddToBootstrapBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_AddToBootstrapWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToBootstrapWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).AddToBootstrapWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateService_AddToBootstrapWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).AddToBootstrapWhitelist(ctx, req.(*AddToBootstrapWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_AddToPeersWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToPeersWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).AddToPeersWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateService_AddToPeersWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).AddToPeersWhitelist(ctx, req.(*AddToPeersWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_AddStakingSecretKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStakingSecretKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).AddStakingSecretKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateService_AddStakingSecretKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).AddStakingSecretKeys(ctx, req.(*AddStakingSecretKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_AllowEveryoneToBootstrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllowEveryoneToBootstrapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).AllowEveryoneToBootstrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateService_AllowEveryoneToBootstrap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).AllowEveryoneToBootstrap(ctx, req.(*AllowEveryoneToBootstrapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_GetBootstrapBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBootstrapBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).GetBootstrapBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateService_GetBootstrapBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).GetBootstrapBlacklist(ctx, req.(*GetBootstrapBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_GetBootstrapWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBootstrapWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).GetBootstrapWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateService_GetBootstrapWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).GetBootstrapWhitelist(ctx, req.(*GetBootstrapWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_GetMipStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMipStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).GetMipStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateService_GetMipStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).GetMipStatus(ctx, req.(*GetMipStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_GetNodeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).GetNodeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateService_GetNodeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).GetNodeStatus(ctx, req.(*GetNodeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_GetPeersWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeersWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).GetPeersWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateService_GetPeersWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).GetPeersWhitelist(ctx, req.(*GetPeersWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_BanNodesByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanNodesByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).BanNodesByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateService_BanNodesByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).BanNodesByIds(ctx, req.(*BanNodesByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_BanNodesByIps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanNodesByIpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).BanNodesByIps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateService_BanNodesByIps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).BanNodesByIps(ctx, req.(*BanNodesByIpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_RemoveFromBootstrapBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromBootstrapBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).RemoveFromBootstrapBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateService_RemoveFromBootstrapBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).RemoveFromBootstrapBlacklist(ctx, req.(*RemoveFromBootstrapBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_RemoveFromBootstrapWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromBootstrapWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).RemoveFromBootstrapWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateService_RemoveFromBootstrapWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).RemoveFromBootstrapWhitelist(ctx, req.(*RemoveFromBootstrapWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_RemoveFromPeersWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromPeersWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).RemoveFromPeersWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateService_RemoveFromPeersWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).RemoveFromPeersWhitelist(ctx, req.(*RemoveFromPeersWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_RemoveStakingAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStakingAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).RemoveStakingAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateService_RemoveStakingAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).RemoveStakingAddresses(ctx, req.(*RemoveStakingAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_SignMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).SignMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateService_SignMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).SignMessages(ctx, req.(*SignMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_ShutdownGracefully_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownGracefullyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).ShutdownGracefully(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateService_ShutdownGracefully_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).ShutdownGracefully(ctx, req.(*ShutdownGracefullyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_UnbanNodesByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbanNodesByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).UnbanNodesByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateService_UnbanNodesByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).UnbanNodesByIds(ctx, req.(*UnbanNodesByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_UnbanNodesByIps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbanNodesByIpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).UnbanNodesByIps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateService_UnbanNodesByIps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).UnbanNodesByIps(ctx, req.(*UnbanNodesByIpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PrivateService_ServiceDesc is the grpc.ServiceDesc for PrivateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrivateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "massa.api.v1.PrivateService",
	HandlerType: (*PrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToBootstrapBlacklist",
			Handler:    _PrivateService_AddToBootstrapBlacklist_Handler,
		},
		{
			MethodName: "AddToBootstrapWhitelist",
			Handler:    _PrivateService_AddToBootstrapWhitelist_Handler,
		},
		{
			MethodName: "AddToPeersWhitelist",
			Handler:    _PrivateService_AddToPeersWhitelist_Handler,
		},
		{
			MethodName: "AddStakingSecretKeys",
			Handler:    _PrivateService_AddStakingSecretKeys_Handler,
		},
		{
			MethodName: "AllowEveryoneToBootstrap",
			Handler:    _PrivateService_AllowEveryoneToBootstrap_Handler,
		},
		{
			MethodName: "GetBootstrapBlacklist",
			Handler:    _PrivateService_GetBootstrapBlacklist_Handler,
		},
		{
			MethodName: "GetBootstrapWhitelist",
			Handler:    _PrivateService_GetBootstrapWhitelist_Handler,
		},
		{
			MethodName: "GetMipStatus",
			Handler:    _PrivateService_GetMipStatus_Handler,
		},
		{
			MethodName: "GetNodeStatus",
			Handler:    _PrivateService_GetNodeStatus_Handler,
		},
		{
			MethodName: "GetPeersWhitelist",
			Handler:    _PrivateService_GetPeersWhitelist_Handler,
		},
		{
			MethodName: "BanNodesByIds",
			Handler:    _PrivateService_BanNodesByIds_Handler,
		},
		{
			MethodName: "BanNodesByIps",
			Handler:    _PrivateService_BanNodesByIps_Handler,
		},
		{
			MethodName: "RemoveFromBootstrapBlacklist",
			Handler:    _PrivateService_RemoveFromBootstrapBlacklist_Handler,
		},
		{
			MethodName: "RemoveFromBootstrapWhitelist",
			Handler:    _PrivateService_RemoveFromBootstrapWhitelist_Handler,
		},
		{
			MethodName: "RemoveFromPeersWhitelist",
			Handler:    _PrivateService_RemoveFromPeersWhitelist_Handler,
		},
		{
			MethodName: "RemoveStakingAddresses",
			Handler:    _PrivateService_RemoveStakingAddresses_Handler,
		},
		{
			MethodName: "SignMessages",
			Handler:    _PrivateService_SignMessages_Handler,
		},
		{
			MethodName: "ShutdownGracefully",
			Handler:    _PrivateService_ShutdownGracefully_Handler,
		},
		{
			MethodName: "UnbanNodesByIds",
			Handler:    _PrivateService_UnbanNodesByIds_Handler,
		},
		{
			MethodName: "UnbanNodesByIps",
			Handler:    _PrivateService_UnbanNodesByIps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "massa/api/v1/private.proto",
}
