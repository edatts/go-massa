// Copyright (c) 2023 MASSA LABS <info@massa.net>

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: massa/api/v1/public.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PublicService_ExecuteReadOnlyCall_FullMethodName       = "/massa.api.v1.PublicService/ExecuteReadOnlyCall"
	PublicService_GetBlocks_FullMethodName                 = "/massa.api.v1.PublicService/GetBlocks"
	PublicService_GetDatastoreEntries_FullMethodName       = "/massa.api.v1.PublicService/GetDatastoreEntries"
	PublicService_GetEndorsements_FullMethodName           = "/massa.api.v1.PublicService/GetEndorsements"
	PublicService_GetNextBlockBestParents_FullMethodName   = "/massa.api.v1.PublicService/GetNextBlockBestParents"
	PublicService_GetOperations_FullMethodName             = "/massa.api.v1.PublicService/GetOperations"
	PublicService_GetScExecutionEvents_FullMethodName      = "/massa.api.v1.PublicService/GetScExecutionEvents"
	PublicService_GetSelectorDraws_FullMethodName          = "/massa.api.v1.PublicService/GetSelectorDraws"
	PublicService_GetStakers_FullMethodName                = "/massa.api.v1.PublicService/GetStakers"
	PublicService_GetStatus_FullMethodName                 = "/massa.api.v1.PublicService/GetStatus"
	PublicService_GetTransactionsThroughput_FullMethodName = "/massa.api.v1.PublicService/GetTransactionsThroughput"
	PublicService_QueryState_FullMethodName                = "/massa.api.v1.PublicService/QueryState"
	PublicService_SearchBlocks_FullMethodName              = "/massa.api.v1.PublicService/SearchBlocks"
	PublicService_SearchEndorsements_FullMethodName        = "/massa.api.v1.PublicService/SearchEndorsements"
	PublicService_SearchOperations_FullMethodName          = "/massa.api.v1.PublicService/SearchOperations"
	PublicService_GetOperationABICallStacks_FullMethodName = "/massa.api.v1.PublicService/GetOperationABICallStacks"
	PublicService_GetSlotABICallStacks_FullMethodName      = "/massa.api.v1.PublicService/GetSlotABICallStacks"
	PublicService_GetSlotTransfers_FullMethodName          = "/massa.api.v1.PublicService/GetSlotTransfers"
	PublicService_NewBlocks_FullMethodName                 = "/massa.api.v1.PublicService/NewBlocks"
	PublicService_NewEndorsements_FullMethodName           = "/massa.api.v1.PublicService/NewEndorsements"
	PublicService_NewFilledBlocks_FullMethodName           = "/massa.api.v1.PublicService/NewFilledBlocks"
	PublicService_NewOperations_FullMethodName             = "/massa.api.v1.PublicService/NewOperations"
	PublicService_NewSlotExecutionOutputs_FullMethodName   = "/massa.api.v1.PublicService/NewSlotExecutionOutputs"
	PublicService_NewSlotABICallStacks_FullMethodName      = "/massa.api.v1.PublicService/NewSlotABICallStacks"
	PublicService_NewSlotTransfers_FullMethodName          = "/massa.api.v1.PublicService/NewSlotTransfers"
	PublicService_SendBlocks_FullMethodName                = "/massa.api.v1.PublicService/SendBlocks"
	PublicService_SendEndorsements_FullMethodName          = "/massa.api.v1.PublicService/SendEndorsements"
	PublicService_SendOperations_FullMethodName            = "/massa.api.v1.PublicService/SendOperations"
	PublicService_TransactionsThroughput_FullMethodName    = "/massa.api.v1.PublicService/TransactionsThroughput"
)

// PublicServiceClient is the client API for PublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicServiceClient interface {
	// Execute read only call
	ExecuteReadOnlyCall(ctx context.Context, in *ExecuteReadOnlyCallRequest, opts ...grpc.CallOption) (*ExecuteReadOnlyCallResponse, error)
	// Get blocks by ids
	GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*GetBlocksResponse, error)
	// Get datastore entries
	GetDatastoreEntries(ctx context.Context, in *GetDatastoreEntriesRequest, opts ...grpc.CallOption) (*GetDatastoreEntriesResponse, error)
	// Get endorsements by ids
	GetEndorsements(ctx context.Context, in *GetEndorsementsRequest, opts ...grpc.CallOption) (*GetEndorsementsResponse, error)
	// Get next block best parents
	GetNextBlockBestParents(ctx context.Context, in *GetNextBlockBestParentsRequest, opts ...grpc.CallOption) (*GetNextBlockBestParentsResponse, error)
	// Get operations by ids
	GetOperations(ctx context.Context, in *GetOperationsRequest, opts ...grpc.CallOption) (*GetOperationsResponse, error)
	// Get smart contracts execution events
	GetScExecutionEvents(ctx context.Context, in *GetScExecutionEventsRequest, opts ...grpc.CallOption) (*GetScExecutionEventsResponse, error)
	// Get selector draws
	GetSelectorDraws(ctx context.Context, in *GetSelectorDrawsRequest, opts ...grpc.CallOption) (*GetSelectorDrawsResponse, error)
	// Get stakers
	GetStakers(ctx context.Context, in *GetStakersRequest, opts ...grpc.CallOption) (*GetStakersResponse, error)
	// Get status
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	// Get transactions throughput
	GetTransactionsThroughput(ctx context.Context, in *GetTransactionsThroughputRequest, opts ...grpc.CallOption) (*GetTransactionsThroughputResponse, error)
	// Query state
	QueryState(ctx context.Context, in *QueryStateRequest, opts ...grpc.CallOption) (*QueryStateResponse, error)
	// Search blocks
	SearchBlocks(ctx context.Context, in *SearchBlocksRequest, opts ...grpc.CallOption) (*SearchBlocksResponse, error)
	// Search endorsements
	SearchEndorsements(ctx context.Context, in *SearchEndorsementsRequest, opts ...grpc.CallOption) (*SearchEndorsementsResponse, error)
	// Search operations
	SearchOperations(ctx context.Context, in *SearchOperationsRequest, opts ...grpc.CallOption) (*SearchOperationsResponse, error)
	// Get ABI call stack of an operation
	GetOperationABICallStacks(ctx context.Context, in *GetOperationABICallStacksRequest, opts ...grpc.CallOption) (*GetOperationABICallStacksResponse, error)
	// Get ABI call stack of all asynchronous executions and all operations for a given slot
	GetSlotABICallStacks(ctx context.Context, in *GetSlotABICallStacksRequest, opts ...grpc.CallOption) (*GetSlotABICallStacksResponse, error)
	// Get all the transfers of MAS for a given slot
	GetSlotTransfers(ctx context.Context, in *GetSlotTransfersRequest, opts ...grpc.CallOption) (*GetSlotTransfersResponse, error)
	// New received and produced blocks
	NewBlocks(ctx context.Context, opts ...grpc.CallOption) (PublicService_NewBlocksClient, error)
	// New received and produced endorsements
	NewEndorsements(ctx context.Context, opts ...grpc.CallOption) (PublicService_NewEndorsementsClient, error)
	// New received and produced blocks with operations
	NewFilledBlocks(ctx context.Context, opts ...grpc.CallOption) (PublicService_NewFilledBlocksClient, error)
	// New received and produced operations
	NewOperations(ctx context.Context, opts ...grpc.CallOption) (PublicService_NewOperationsClient, error)
	// New received and slot execution events
	NewSlotExecutionOutputs(ctx context.Context, opts ...grpc.CallOption) (PublicService_NewSlotExecutionOutputsClient, error)
	// Call stack for each slot executed
	NewSlotABICallStacks(ctx context.Context, opts ...grpc.CallOption) (PublicService_NewSlotABICallStacksClient, error)
	// Transfer list for each slot executed
	NewSlotTransfers(ctx context.Context, opts ...grpc.CallOption) (PublicService_NewSlotTransfersClient, error)
	// Send blocks
	SendBlocks(ctx context.Context, opts ...grpc.CallOption) (PublicService_SendBlocksClient, error)
	// Send endorsements
	SendEndorsements(ctx context.Context, opts ...grpc.CallOption) (PublicService_SendEndorsementsClient, error)
	// Send operations
	SendOperations(ctx context.Context, opts ...grpc.CallOption) (PublicService_SendOperationsClient, error)
	// Transactions throughput
	TransactionsThroughput(ctx context.Context, opts ...grpc.CallOption) (PublicService_TransactionsThroughputClient, error)
}

type publicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicServiceClient(cc grpc.ClientConnInterface) PublicServiceClient {
	return &publicServiceClient{cc}
}

func (c *publicServiceClient) ExecuteReadOnlyCall(ctx context.Context, in *ExecuteReadOnlyCallRequest, opts ...grpc.CallOption) (*ExecuteReadOnlyCallResponse, error) {
	out := new(ExecuteReadOnlyCallResponse)
	err := c.cc.Invoke(ctx, PublicService_ExecuteReadOnlyCall_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*GetBlocksResponse, error) {
	out := new(GetBlocksResponse)
	err := c.cc.Invoke(ctx, PublicService_GetBlocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetDatastoreEntries(ctx context.Context, in *GetDatastoreEntriesRequest, opts ...grpc.CallOption) (*GetDatastoreEntriesResponse, error) {
	out := new(GetDatastoreEntriesResponse)
	err := c.cc.Invoke(ctx, PublicService_GetDatastoreEntries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetEndorsements(ctx context.Context, in *GetEndorsementsRequest, opts ...grpc.CallOption) (*GetEndorsementsResponse, error) {
	out := new(GetEndorsementsResponse)
	err := c.cc.Invoke(ctx, PublicService_GetEndorsements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetNextBlockBestParents(ctx context.Context, in *GetNextBlockBestParentsRequest, opts ...grpc.CallOption) (*GetNextBlockBestParentsResponse, error) {
	out := new(GetNextBlockBestParentsResponse)
	err := c.cc.Invoke(ctx, PublicService_GetNextBlockBestParents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetOperations(ctx context.Context, in *GetOperationsRequest, opts ...grpc.CallOption) (*GetOperationsResponse, error) {
	out := new(GetOperationsResponse)
	err := c.cc.Invoke(ctx, PublicService_GetOperations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetScExecutionEvents(ctx context.Context, in *GetScExecutionEventsRequest, opts ...grpc.CallOption) (*GetScExecutionEventsResponse, error) {
	out := new(GetScExecutionEventsResponse)
	err := c.cc.Invoke(ctx, PublicService_GetScExecutionEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetSelectorDraws(ctx context.Context, in *GetSelectorDrawsRequest, opts ...grpc.CallOption) (*GetSelectorDrawsResponse, error) {
	out := new(GetSelectorDrawsResponse)
	err := c.cc.Invoke(ctx, PublicService_GetSelectorDraws_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetStakers(ctx context.Context, in *GetStakersRequest, opts ...grpc.CallOption) (*GetStakersResponse, error) {
	out := new(GetStakersResponse)
	err := c.cc.Invoke(ctx, PublicService_GetStakers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, PublicService_GetStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetTransactionsThroughput(ctx context.Context, in *GetTransactionsThroughputRequest, opts ...grpc.CallOption) (*GetTransactionsThroughputResponse, error) {
	out := new(GetTransactionsThroughputResponse)
	err := c.cc.Invoke(ctx, PublicService_GetTransactionsThroughput_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) QueryState(ctx context.Context, in *QueryStateRequest, opts ...grpc.CallOption) (*QueryStateResponse, error) {
	out := new(QueryStateResponse)
	err := c.cc.Invoke(ctx, PublicService_QueryState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) SearchBlocks(ctx context.Context, in *SearchBlocksRequest, opts ...grpc.CallOption) (*SearchBlocksResponse, error) {
	out := new(SearchBlocksResponse)
	err := c.cc.Invoke(ctx, PublicService_SearchBlocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) SearchEndorsements(ctx context.Context, in *SearchEndorsementsRequest, opts ...grpc.CallOption) (*SearchEndorsementsResponse, error) {
	out := new(SearchEndorsementsResponse)
	err := c.cc.Invoke(ctx, PublicService_SearchEndorsements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) SearchOperations(ctx context.Context, in *SearchOperationsRequest, opts ...grpc.CallOption) (*SearchOperationsResponse, error) {
	out := new(SearchOperationsResponse)
	err := c.cc.Invoke(ctx, PublicService_SearchOperations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetOperationABICallStacks(ctx context.Context, in *GetOperationABICallStacksRequest, opts ...grpc.CallOption) (*GetOperationABICallStacksResponse, error) {
	out := new(GetOperationABICallStacksResponse)
	err := c.cc.Invoke(ctx, PublicService_GetOperationABICallStacks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetSlotABICallStacks(ctx context.Context, in *GetSlotABICallStacksRequest, opts ...grpc.CallOption) (*GetSlotABICallStacksResponse, error) {
	out := new(GetSlotABICallStacksResponse)
	err := c.cc.Invoke(ctx, PublicService_GetSlotABICallStacks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GetSlotTransfers(ctx context.Context, in *GetSlotTransfersRequest, opts ...grpc.CallOption) (*GetSlotTransfersResponse, error) {
	out := new(GetSlotTransfersResponse)
	err := c.cc.Invoke(ctx, PublicService_GetSlotTransfers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) NewBlocks(ctx context.Context, opts ...grpc.CallOption) (PublicService_NewBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[0], PublicService_NewBlocks_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &publicServiceNewBlocksClient{stream}
	return x, nil
}

type PublicService_NewBlocksClient interface {
	Send(*NewBlocksRequest) error
	Recv() (*NewBlocksResponse, error)
	grpc.ClientStream
}

type publicServiceNewBlocksClient struct {
	grpc.ClientStream
}

func (x *publicServiceNewBlocksClient) Send(m *NewBlocksRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *publicServiceNewBlocksClient) Recv() (*NewBlocksResponse, error) {
	m := new(NewBlocksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publicServiceClient) NewEndorsements(ctx context.Context, opts ...grpc.CallOption) (PublicService_NewEndorsementsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[1], PublicService_NewEndorsements_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &publicServiceNewEndorsementsClient{stream}
	return x, nil
}

type PublicService_NewEndorsementsClient interface {
	Send(*NewEndorsementsRequest) error
	Recv() (*NewEndorsementsResponse, error)
	grpc.ClientStream
}

type publicServiceNewEndorsementsClient struct {
	grpc.ClientStream
}

func (x *publicServiceNewEndorsementsClient) Send(m *NewEndorsementsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *publicServiceNewEndorsementsClient) Recv() (*NewEndorsementsResponse, error) {
	m := new(NewEndorsementsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publicServiceClient) NewFilledBlocks(ctx context.Context, opts ...grpc.CallOption) (PublicService_NewFilledBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[2], PublicService_NewFilledBlocks_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &publicServiceNewFilledBlocksClient{stream}
	return x, nil
}

type PublicService_NewFilledBlocksClient interface {
	Send(*NewFilledBlocksRequest) error
	Recv() (*NewFilledBlocksResponse, error)
	grpc.ClientStream
}

type publicServiceNewFilledBlocksClient struct {
	grpc.ClientStream
}

func (x *publicServiceNewFilledBlocksClient) Send(m *NewFilledBlocksRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *publicServiceNewFilledBlocksClient) Recv() (*NewFilledBlocksResponse, error) {
	m := new(NewFilledBlocksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publicServiceClient) NewOperations(ctx context.Context, opts ...grpc.CallOption) (PublicService_NewOperationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[3], PublicService_NewOperations_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &publicServiceNewOperationsClient{stream}
	return x, nil
}

type PublicService_NewOperationsClient interface {
	Send(*NewOperationsRequest) error
	Recv() (*NewOperationsResponse, error)
	grpc.ClientStream
}

type publicServiceNewOperationsClient struct {
	grpc.ClientStream
}

func (x *publicServiceNewOperationsClient) Send(m *NewOperationsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *publicServiceNewOperationsClient) Recv() (*NewOperationsResponse, error) {
	m := new(NewOperationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publicServiceClient) NewSlotExecutionOutputs(ctx context.Context, opts ...grpc.CallOption) (PublicService_NewSlotExecutionOutputsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[4], PublicService_NewSlotExecutionOutputs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &publicServiceNewSlotExecutionOutputsClient{stream}
	return x, nil
}

type PublicService_NewSlotExecutionOutputsClient interface {
	Send(*NewSlotExecutionOutputsRequest) error
	Recv() (*NewSlotExecutionOutputsResponse, error)
	grpc.ClientStream
}

type publicServiceNewSlotExecutionOutputsClient struct {
	grpc.ClientStream
}

func (x *publicServiceNewSlotExecutionOutputsClient) Send(m *NewSlotExecutionOutputsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *publicServiceNewSlotExecutionOutputsClient) Recv() (*NewSlotExecutionOutputsResponse, error) {
	m := new(NewSlotExecutionOutputsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publicServiceClient) NewSlotABICallStacks(ctx context.Context, opts ...grpc.CallOption) (PublicService_NewSlotABICallStacksClient, error) {
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[5], PublicService_NewSlotABICallStacks_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &publicServiceNewSlotABICallStacksClient{stream}
	return x, nil
}

type PublicService_NewSlotABICallStacksClient interface {
	Send(*NewSlotABICallStacksRequest) error
	Recv() (*NewSlotABICallStacksResponse, error)
	grpc.ClientStream
}

type publicServiceNewSlotABICallStacksClient struct {
	grpc.ClientStream
}

func (x *publicServiceNewSlotABICallStacksClient) Send(m *NewSlotABICallStacksRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *publicServiceNewSlotABICallStacksClient) Recv() (*NewSlotABICallStacksResponse, error) {
	m := new(NewSlotABICallStacksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publicServiceClient) NewSlotTransfers(ctx context.Context, opts ...grpc.CallOption) (PublicService_NewSlotTransfersClient, error) {
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[6], PublicService_NewSlotTransfers_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &publicServiceNewSlotTransfersClient{stream}
	return x, nil
}

type PublicService_NewSlotTransfersClient interface {
	Send(*NewSlotTransfersRequest) error
	Recv() (*NewSlotTransfersResponse, error)
	grpc.ClientStream
}

type publicServiceNewSlotTransfersClient struct {
	grpc.ClientStream
}

func (x *publicServiceNewSlotTransfersClient) Send(m *NewSlotTransfersRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *publicServiceNewSlotTransfersClient) Recv() (*NewSlotTransfersResponse, error) {
	m := new(NewSlotTransfersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publicServiceClient) SendBlocks(ctx context.Context, opts ...grpc.CallOption) (PublicService_SendBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[7], PublicService_SendBlocks_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &publicServiceSendBlocksClient{stream}
	return x, nil
}

type PublicService_SendBlocksClient interface {
	Send(*SendBlocksRequest) error
	Recv() (*SendBlocksResponse, error)
	grpc.ClientStream
}

type publicServiceSendBlocksClient struct {
	grpc.ClientStream
}

func (x *publicServiceSendBlocksClient) Send(m *SendBlocksRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *publicServiceSendBlocksClient) Recv() (*SendBlocksResponse, error) {
	m := new(SendBlocksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publicServiceClient) SendEndorsements(ctx context.Context, opts ...grpc.CallOption) (PublicService_SendEndorsementsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[8], PublicService_SendEndorsements_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &publicServiceSendEndorsementsClient{stream}
	return x, nil
}

type PublicService_SendEndorsementsClient interface {
	Send(*SendEndorsementsRequest) error
	Recv() (*SendEndorsementsResponse, error)
	grpc.ClientStream
}

type publicServiceSendEndorsementsClient struct {
	grpc.ClientStream
}

func (x *publicServiceSendEndorsementsClient) Send(m *SendEndorsementsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *publicServiceSendEndorsementsClient) Recv() (*SendEndorsementsResponse, error) {
	m := new(SendEndorsementsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publicServiceClient) SendOperations(ctx context.Context, opts ...grpc.CallOption) (PublicService_SendOperationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[9], PublicService_SendOperations_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &publicServiceSendOperationsClient{stream}
	return x, nil
}

type PublicService_SendOperationsClient interface {
	Send(*SendOperationsRequest) error
	Recv() (*SendOperationsResponse, error)
	grpc.ClientStream
}

type publicServiceSendOperationsClient struct {
	grpc.ClientStream
}

func (x *publicServiceSendOperationsClient) Send(m *SendOperationsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *publicServiceSendOperationsClient) Recv() (*SendOperationsResponse, error) {
	m := new(SendOperationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publicServiceClient) TransactionsThroughput(ctx context.Context, opts ...grpc.CallOption) (PublicService_TransactionsThroughputClient, error) {
	stream, err := c.cc.NewStream(ctx, &PublicService_ServiceDesc.Streams[10], PublicService_TransactionsThroughput_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &publicServiceTransactionsThroughputClient{stream}
	return x, nil
}

type PublicService_TransactionsThroughputClient interface {
	Send(*TransactionsThroughputRequest) error
	Recv() (*TransactionsThroughputResponse, error)
	grpc.ClientStream
}

type publicServiceTransactionsThroughputClient struct {
	grpc.ClientStream
}

func (x *publicServiceTransactionsThroughputClient) Send(m *TransactionsThroughputRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *publicServiceTransactionsThroughputClient) Recv() (*TransactionsThroughputResponse, error) {
	m := new(TransactionsThroughputResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PublicServiceServer is the server API for PublicService service.
// All implementations should embed UnimplementedPublicServiceServer
// for forward compatibility
type PublicServiceServer interface {
	// Execute read only call
	ExecuteReadOnlyCall(context.Context, *ExecuteReadOnlyCallRequest) (*ExecuteReadOnlyCallResponse, error)
	// Get blocks by ids
	GetBlocks(context.Context, *GetBlocksRequest) (*GetBlocksResponse, error)
	// Get datastore entries
	GetDatastoreEntries(context.Context, *GetDatastoreEntriesRequest) (*GetDatastoreEntriesResponse, error)
	// Get endorsements by ids
	GetEndorsements(context.Context, *GetEndorsementsRequest) (*GetEndorsementsResponse, error)
	// Get next block best parents
	GetNextBlockBestParents(context.Context, *GetNextBlockBestParentsRequest) (*GetNextBlockBestParentsResponse, error)
	// Get operations by ids
	GetOperations(context.Context, *GetOperationsRequest) (*GetOperationsResponse, error)
	// Get smart contracts execution events
	GetScExecutionEvents(context.Context, *GetScExecutionEventsRequest) (*GetScExecutionEventsResponse, error)
	// Get selector draws
	GetSelectorDraws(context.Context, *GetSelectorDrawsRequest) (*GetSelectorDrawsResponse, error)
	// Get stakers
	GetStakers(context.Context, *GetStakersRequest) (*GetStakersResponse, error)
	// Get status
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	// Get transactions throughput
	GetTransactionsThroughput(context.Context, *GetTransactionsThroughputRequest) (*GetTransactionsThroughputResponse, error)
	// Query state
	QueryState(context.Context, *QueryStateRequest) (*QueryStateResponse, error)
	// Search blocks
	SearchBlocks(context.Context, *SearchBlocksRequest) (*SearchBlocksResponse, error)
	// Search endorsements
	SearchEndorsements(context.Context, *SearchEndorsementsRequest) (*SearchEndorsementsResponse, error)
	// Search operations
	SearchOperations(context.Context, *SearchOperationsRequest) (*SearchOperationsResponse, error)
	// Get ABI call stack of an operation
	GetOperationABICallStacks(context.Context, *GetOperationABICallStacksRequest) (*GetOperationABICallStacksResponse, error)
	// Get ABI call stack of all asynchronous executions and all operations for a given slot
	GetSlotABICallStacks(context.Context, *GetSlotABICallStacksRequest) (*GetSlotABICallStacksResponse, error)
	// Get all the transfers of MAS for a given slot
	GetSlotTransfers(context.Context, *GetSlotTransfersRequest) (*GetSlotTransfersResponse, error)
	// New received and produced blocks
	NewBlocks(PublicService_NewBlocksServer) error
	// New received and produced endorsements
	NewEndorsements(PublicService_NewEndorsementsServer) error
	// New received and produced blocks with operations
	NewFilledBlocks(PublicService_NewFilledBlocksServer) error
	// New received and produced operations
	NewOperations(PublicService_NewOperationsServer) error
	// New received and slot execution events
	NewSlotExecutionOutputs(PublicService_NewSlotExecutionOutputsServer) error
	// Call stack for each slot executed
	NewSlotABICallStacks(PublicService_NewSlotABICallStacksServer) error
	// Transfer list for each slot executed
	NewSlotTransfers(PublicService_NewSlotTransfersServer) error
	// Send blocks
	SendBlocks(PublicService_SendBlocksServer) error
	// Send endorsements
	SendEndorsements(PublicService_SendEndorsementsServer) error
	// Send operations
	SendOperations(PublicService_SendOperationsServer) error
	// Transactions throughput
	TransactionsThroughput(PublicService_TransactionsThroughputServer) error
}

// UnimplementedPublicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPublicServiceServer struct {
}

func (UnimplementedPublicServiceServer) ExecuteReadOnlyCall(context.Context, *ExecuteReadOnlyCallRequest) (*ExecuteReadOnlyCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteReadOnlyCall not implemented")
}
func (UnimplementedPublicServiceServer) GetBlocks(context.Context, *GetBlocksRequest) (*GetBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (UnimplementedPublicServiceServer) GetDatastoreEntries(context.Context, *GetDatastoreEntriesRequest) (*GetDatastoreEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatastoreEntries not implemented")
}
func (UnimplementedPublicServiceServer) GetEndorsements(context.Context, *GetEndorsementsRequest) (*GetEndorsementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndorsements not implemented")
}
func (UnimplementedPublicServiceServer) GetNextBlockBestParents(context.Context, *GetNextBlockBestParentsRequest) (*GetNextBlockBestParentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextBlockBestParents not implemented")
}
func (UnimplementedPublicServiceServer) GetOperations(context.Context, *GetOperationsRequest) (*GetOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperations not implemented")
}
func (UnimplementedPublicServiceServer) GetScExecutionEvents(context.Context, *GetScExecutionEventsRequest) (*GetScExecutionEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScExecutionEvents not implemented")
}
func (UnimplementedPublicServiceServer) GetSelectorDraws(context.Context, *GetSelectorDrawsRequest) (*GetSelectorDrawsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSelectorDraws not implemented")
}
func (UnimplementedPublicServiceServer) GetStakers(context.Context, *GetStakersRequest) (*GetStakersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakers not implemented")
}
func (UnimplementedPublicServiceServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedPublicServiceServer) GetTransactionsThroughput(context.Context, *GetTransactionsThroughputRequest) (*GetTransactionsThroughputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsThroughput not implemented")
}
func (UnimplementedPublicServiceServer) QueryState(context.Context, *QueryStateRequest) (*QueryStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryState not implemented")
}
func (UnimplementedPublicServiceServer) SearchBlocks(context.Context, *SearchBlocksRequest) (*SearchBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBlocks not implemented")
}
func (UnimplementedPublicServiceServer) SearchEndorsements(context.Context, *SearchEndorsementsRequest) (*SearchEndorsementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchEndorsements not implemented")
}
func (UnimplementedPublicServiceServer) SearchOperations(context.Context, *SearchOperationsRequest) (*SearchOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOperations not implemented")
}
func (UnimplementedPublicServiceServer) GetOperationABICallStacks(context.Context, *GetOperationABICallStacksRequest) (*GetOperationABICallStacksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperationABICallStacks not implemented")
}
func (UnimplementedPublicServiceServer) GetSlotABICallStacks(context.Context, *GetSlotABICallStacksRequest) (*GetSlotABICallStacksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlotABICallStacks not implemented")
}
func (UnimplementedPublicServiceServer) GetSlotTransfers(context.Context, *GetSlotTransfersRequest) (*GetSlotTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlotTransfers not implemented")
}
func (UnimplementedPublicServiceServer) NewBlocks(PublicService_NewBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method NewBlocks not implemented")
}
func (UnimplementedPublicServiceServer) NewEndorsements(PublicService_NewEndorsementsServer) error {
	return status.Errorf(codes.Unimplemented, "method NewEndorsements not implemented")
}
func (UnimplementedPublicServiceServer) NewFilledBlocks(PublicService_NewFilledBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method NewFilledBlocks not implemented")
}
func (UnimplementedPublicServiceServer) NewOperations(PublicService_NewOperationsServer) error {
	return status.Errorf(codes.Unimplemented, "method NewOperations not implemented")
}
func (UnimplementedPublicServiceServer) NewSlotExecutionOutputs(PublicService_NewSlotExecutionOutputsServer) error {
	return status.Errorf(codes.Unimplemented, "method NewSlotExecutionOutputs not implemented")
}
func (UnimplementedPublicServiceServer) NewSlotABICallStacks(PublicService_NewSlotABICallStacksServer) error {
	return status.Errorf(codes.Unimplemented, "method NewSlotABICallStacks not implemented")
}
func (UnimplementedPublicServiceServer) NewSlotTransfers(PublicService_NewSlotTransfersServer) error {
	return status.Errorf(codes.Unimplemented, "method NewSlotTransfers not implemented")
}
func (UnimplementedPublicServiceServer) SendBlocks(PublicService_SendBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method SendBlocks not implemented")
}
func (UnimplementedPublicServiceServer) SendEndorsements(PublicService_SendEndorsementsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendEndorsements not implemented")
}
func (UnimplementedPublicServiceServer) SendOperations(PublicService_SendOperationsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendOperations not implemented")
}
func (UnimplementedPublicServiceServer) TransactionsThroughput(PublicService_TransactionsThroughputServer) error {
	return status.Errorf(codes.Unimplemented, "method TransactionsThroughput not implemented")
}

// UnsafePublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicServiceServer will
// result in compilation errors.
type UnsafePublicServiceServer interface {
	mustEmbedUnimplementedPublicServiceServer()
}

func RegisterPublicServiceServer(s grpc.ServiceRegistrar, srv PublicServiceServer) {
	s.RegisterService(&PublicService_ServiceDesc, srv)
}

func _PublicService_ExecuteReadOnlyCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteReadOnlyCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).ExecuteReadOnlyCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_ExecuteReadOnlyCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).ExecuteReadOnlyCall(ctx, req.(*ExecuteReadOnlyCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetBlocks(ctx, req.(*GetBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetDatastoreEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatastoreEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetDatastoreEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetDatastoreEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetDatastoreEntries(ctx, req.(*GetDatastoreEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetEndorsements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEndorsementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetEndorsements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetEndorsements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetEndorsements(ctx, req.(*GetEndorsementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetNextBlockBestParents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextBlockBestParentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetNextBlockBestParents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetNextBlockBestParents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetNextBlockBestParents(ctx, req.(*GetNextBlockBestParentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetOperations(ctx, req.(*GetOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetScExecutionEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScExecutionEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetScExecutionEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetScExecutionEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetScExecutionEvents(ctx, req.(*GetScExecutionEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetSelectorDraws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSelectorDrawsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetSelectorDraws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetSelectorDraws_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetSelectorDraws(ctx, req.(*GetSelectorDrawsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetStakers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStakersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetStakers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetStakers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetStakers(ctx, req.(*GetStakersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetTransactionsThroughput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsThroughputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetTransactionsThroughput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetTransactionsThroughput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetTransactionsThroughput(ctx, req.(*GetTransactionsThroughputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_QueryState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).QueryState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_QueryState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).QueryState(ctx, req.(*QueryStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_SearchBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).SearchBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_SearchBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).SearchBlocks(ctx, req.(*SearchBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_SearchEndorsements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchEndorsementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).SearchEndorsements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_SearchEndorsements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).SearchEndorsements(ctx, req.(*SearchEndorsementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_SearchOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).SearchOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_SearchOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).SearchOperations(ctx, req.(*SearchOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetOperationABICallStacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationABICallStacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetOperationABICallStacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetOperationABICallStacks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetOperationABICallStacks(ctx, req.(*GetOperationABICallStacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetSlotABICallStacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSlotABICallStacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetSlotABICallStacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetSlotABICallStacks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetSlotABICallStacks(ctx, req.(*GetSlotABICallStacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GetSlotTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSlotTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GetSlotTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicService_GetSlotTransfers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GetSlotTransfers(ctx, req.(*GetSlotTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_NewBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicServiceServer).NewBlocks(&publicServiceNewBlocksServer{stream})
}

type PublicService_NewBlocksServer interface {
	Send(*NewBlocksResponse) error
	Recv() (*NewBlocksRequest, error)
	grpc.ServerStream
}

type publicServiceNewBlocksServer struct {
	grpc.ServerStream
}

func (x *publicServiceNewBlocksServer) Send(m *NewBlocksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *publicServiceNewBlocksServer) Recv() (*NewBlocksRequest, error) {
	m := new(NewBlocksRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PublicService_NewEndorsements_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicServiceServer).NewEndorsements(&publicServiceNewEndorsementsServer{stream})
}

type PublicService_NewEndorsementsServer interface {
	Send(*NewEndorsementsResponse) error
	Recv() (*NewEndorsementsRequest, error)
	grpc.ServerStream
}

type publicServiceNewEndorsementsServer struct {
	grpc.ServerStream
}

func (x *publicServiceNewEndorsementsServer) Send(m *NewEndorsementsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *publicServiceNewEndorsementsServer) Recv() (*NewEndorsementsRequest, error) {
	m := new(NewEndorsementsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PublicService_NewFilledBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicServiceServer).NewFilledBlocks(&publicServiceNewFilledBlocksServer{stream})
}

type PublicService_NewFilledBlocksServer interface {
	Send(*NewFilledBlocksResponse) error
	Recv() (*NewFilledBlocksRequest, error)
	grpc.ServerStream
}

type publicServiceNewFilledBlocksServer struct {
	grpc.ServerStream
}

func (x *publicServiceNewFilledBlocksServer) Send(m *NewFilledBlocksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *publicServiceNewFilledBlocksServer) Recv() (*NewFilledBlocksRequest, error) {
	m := new(NewFilledBlocksRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PublicService_NewOperations_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicServiceServer).NewOperations(&publicServiceNewOperationsServer{stream})
}

type PublicService_NewOperationsServer interface {
	Send(*NewOperationsResponse) error
	Recv() (*NewOperationsRequest, error)
	grpc.ServerStream
}

type publicServiceNewOperationsServer struct {
	grpc.ServerStream
}

func (x *publicServiceNewOperationsServer) Send(m *NewOperationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *publicServiceNewOperationsServer) Recv() (*NewOperationsRequest, error) {
	m := new(NewOperationsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PublicService_NewSlotExecutionOutputs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicServiceServer).NewSlotExecutionOutputs(&publicServiceNewSlotExecutionOutputsServer{stream})
}

type PublicService_NewSlotExecutionOutputsServer interface {
	Send(*NewSlotExecutionOutputsResponse) error
	Recv() (*NewSlotExecutionOutputsRequest, error)
	grpc.ServerStream
}

type publicServiceNewSlotExecutionOutputsServer struct {
	grpc.ServerStream
}

func (x *publicServiceNewSlotExecutionOutputsServer) Send(m *NewSlotExecutionOutputsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *publicServiceNewSlotExecutionOutputsServer) Recv() (*NewSlotExecutionOutputsRequest, error) {
	m := new(NewSlotExecutionOutputsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PublicService_NewSlotABICallStacks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicServiceServer).NewSlotABICallStacks(&publicServiceNewSlotABICallStacksServer{stream})
}

type PublicService_NewSlotABICallStacksServer interface {
	Send(*NewSlotABICallStacksResponse) error
	Recv() (*NewSlotABICallStacksRequest, error)
	grpc.ServerStream
}

type publicServiceNewSlotABICallStacksServer struct {
	grpc.ServerStream
}

func (x *publicServiceNewSlotABICallStacksServer) Send(m *NewSlotABICallStacksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *publicServiceNewSlotABICallStacksServer) Recv() (*NewSlotABICallStacksRequest, error) {
	m := new(NewSlotABICallStacksRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PublicService_NewSlotTransfers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicServiceServer).NewSlotTransfers(&publicServiceNewSlotTransfersServer{stream})
}

type PublicService_NewSlotTransfersServer interface {
	Send(*NewSlotTransfersResponse) error
	Recv() (*NewSlotTransfersRequest, error)
	grpc.ServerStream
}

type publicServiceNewSlotTransfersServer struct {
	grpc.ServerStream
}

func (x *publicServiceNewSlotTransfersServer) Send(m *NewSlotTransfersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *publicServiceNewSlotTransfersServer) Recv() (*NewSlotTransfersRequest, error) {
	m := new(NewSlotTransfersRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PublicService_SendBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicServiceServer).SendBlocks(&publicServiceSendBlocksServer{stream})
}

type PublicService_SendBlocksServer interface {
	Send(*SendBlocksResponse) error
	Recv() (*SendBlocksRequest, error)
	grpc.ServerStream
}

type publicServiceSendBlocksServer struct {
	grpc.ServerStream
}

func (x *publicServiceSendBlocksServer) Send(m *SendBlocksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *publicServiceSendBlocksServer) Recv() (*SendBlocksRequest, error) {
	m := new(SendBlocksRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PublicService_SendEndorsements_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicServiceServer).SendEndorsements(&publicServiceSendEndorsementsServer{stream})
}

type PublicService_SendEndorsementsServer interface {
	Send(*SendEndorsementsResponse) error
	Recv() (*SendEndorsementsRequest, error)
	grpc.ServerStream
}

type publicServiceSendEndorsementsServer struct {
	grpc.ServerStream
}

func (x *publicServiceSendEndorsementsServer) Send(m *SendEndorsementsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *publicServiceSendEndorsementsServer) Recv() (*SendEndorsementsRequest, error) {
	m := new(SendEndorsementsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PublicService_SendOperations_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicServiceServer).SendOperations(&publicServiceSendOperationsServer{stream})
}

type PublicService_SendOperationsServer interface {
	Send(*SendOperationsResponse) error
	Recv() (*SendOperationsRequest, error)
	grpc.ServerStream
}

type publicServiceSendOperationsServer struct {
	grpc.ServerStream
}

func (x *publicServiceSendOperationsServer) Send(m *SendOperationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *publicServiceSendOperationsServer) Recv() (*SendOperationsRequest, error) {
	m := new(SendOperationsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PublicService_TransactionsThroughput_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicServiceServer).TransactionsThroughput(&publicServiceTransactionsThroughputServer{stream})
}

type PublicService_TransactionsThroughputServer interface {
	Send(*TransactionsThroughputResponse) error
	Recv() (*TransactionsThroughputRequest, error)
	grpc.ServerStream
}

type publicServiceTransactionsThroughputServer struct {
	grpc.ServerStream
}

func (x *publicServiceTransactionsThroughputServer) Send(m *TransactionsThroughputResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *publicServiceTransactionsThroughputServer) Recv() (*TransactionsThroughputRequest, error) {
	m := new(TransactionsThroughputRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PublicService_ServiceDesc is the grpc.ServiceDesc for PublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "massa.api.v1.PublicService",
	HandlerType: (*PublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteReadOnlyCall",
			Handler:    _PublicService_ExecuteReadOnlyCall_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _PublicService_GetBlocks_Handler,
		},
		{
			MethodName: "GetDatastoreEntries",
			Handler:    _PublicService_GetDatastoreEntries_Handler,
		},
		{
			MethodName: "GetEndorsements",
			Handler:    _PublicService_GetEndorsements_Handler,
		},
		{
			MethodName: "GetNextBlockBestParents",
			Handler:    _PublicService_GetNextBlockBestParents_Handler,
		},
		{
			MethodName: "GetOperations",
			Handler:    _PublicService_GetOperations_Handler,
		},
		{
			MethodName: "GetScExecutionEvents",
			Handler:    _PublicService_GetScExecutionEvents_Handler,
		},
		{
			MethodName: "GetSelectorDraws",
			Handler:    _PublicService_GetSelectorDraws_Handler,
		},
		{
			MethodName: "GetStakers",
			Handler:    _PublicService_GetStakers_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _PublicService_GetStatus_Handler,
		},
		{
			MethodName: "GetTransactionsThroughput",
			Handler:    _PublicService_GetTransactionsThroughput_Handler,
		},
		{
			MethodName: "QueryState",
			Handler:    _PublicService_QueryState_Handler,
		},
		{
			MethodName: "SearchBlocks",
			Handler:    _PublicService_SearchBlocks_Handler,
		},
		{
			MethodName: "SearchEndorsements",
			Handler:    _PublicService_SearchEndorsements_Handler,
		},
		{
			MethodName: "SearchOperations",
			Handler:    _PublicService_SearchOperations_Handler,
		},
		{
			MethodName: "GetOperationABICallStacks",
			Handler:    _PublicService_GetOperationABICallStacks_Handler,
		},
		{
			MethodName: "GetSlotABICallStacks",
			Handler:    _PublicService_GetSlotABICallStacks_Handler,
		},
		{
			MethodName: "GetSlotTransfers",
			Handler:    _PublicService_GetSlotTransfers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NewBlocks",
			Handler:       _PublicService_NewBlocks_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "NewEndorsements",
			Handler:       _PublicService_NewEndorsements_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "NewFilledBlocks",
			Handler:       _PublicService_NewFilledBlocks_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "NewOperations",
			Handler:       _PublicService_NewOperations_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "NewSlotExecutionOutputs",
			Handler:       _PublicService_NewSlotExecutionOutputs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "NewSlotABICallStacks",
			Handler:       _PublicService_NewSlotABICallStacks_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "NewSlotTransfers",
			Handler:       _PublicService_NewSlotTransfers_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendBlocks",
			Handler:       _PublicService_SendBlocks_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendEndorsements",
			Handler:       _PublicService_SendEndorsements_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendOperations",
			Handler:       _PublicService_SendOperations_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TransactionsThroughput",
			Handler:       _PublicService_TransactionsThroughput_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "massa/api/v1/public.proto",
}
