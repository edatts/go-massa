// Copyright (c) 2023 MASSA LABS <info@massa.net>

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: massa/model/v1/operation.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Operation type enum
type OpType int32

const (
	OpType_OP_TYPE_UNSPECIFIED OpType = 0 // Default enum value
	OpType_OP_TYPE_TRANSACTION OpType = 1 // Transaction
	OpType_OP_TYPE_ROLL_BUY    OpType = 2 // Roll buy
	OpType_OP_TYPE_ROLL_SELL   OpType = 3 // Roll sell
	OpType_OP_TYPE_EXECUTE_SC  OpType = 4 // Execute smart contract
	OpType_OP_TYPE_CALL_SC     OpType = 5 // Call smart contract
)

// Enum value maps for OpType.
var (
	OpType_name = map[int32]string{
		0: "OP_TYPE_UNSPECIFIED",
		1: "OP_TYPE_TRANSACTION",
		2: "OP_TYPE_ROLL_BUY",
		3: "OP_TYPE_ROLL_SELL",
		4: "OP_TYPE_EXECUTE_SC",
		5: "OP_TYPE_CALL_SC",
	}
	OpType_value = map[string]int32{
		"OP_TYPE_UNSPECIFIED": 0,
		"OP_TYPE_TRANSACTION": 1,
		"OP_TYPE_ROLL_BUY":    2,
		"OP_TYPE_ROLL_SELL":   3,
		"OP_TYPE_EXECUTE_SC":  4,
		"OP_TYPE_CALL_SC":     5,
	}
)

func (x OpType) Enum() *OpType {
	p := new(OpType)
	*p = x
	return p
}

func (x OpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpType) Descriptor() protoreflect.EnumDescriptor {
	return file_massa_model_v1_operation_proto_enumTypes[0].Descriptor()
}

func (OpType) Type() protoreflect.EnumType {
	return &file_massa_model_v1_operation_proto_enumTypes[0]
}

func (x OpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpType.Descriptor instead.
func (OpType) EnumDescriptor() ([]byte, []int) {
	return file_massa_model_v1_operation_proto_rawDescGZIP(), []int{0}
}

// The operation as sent in the network
type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The fee they have decided for this operation
	Fee *NativeAmount `protobuf:"bytes,1,opt,name=fee,proto3" json:"fee,omitempty"`
	// After `expire_period` slot the operation won't be included in a block
	ExpirePeriod uint64 `protobuf:"varint,2,opt,name=expire_period,json=expirePeriod,proto3" json:"expire_period,omitempty"`
	// The type specific operation part
	Op *OperationType `protobuf:"bytes,3,opt,name=op,proto3" json:"op,omitempty"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_massa_model_v1_operation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_massa_model_v1_operation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_massa_model_v1_operation_proto_rawDescGZIP(), []int{0}
}

func (x *Operation) GetFee() *NativeAmount {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *Operation) GetExpirePeriod() uint64 {
	if x != nil {
		return x.ExpirePeriod
	}
	return 0
}

func (x *Operation) GetOp() *OperationType {
	if x != nil {
		return x.Op
	}
	return nil
}

// Type specific operation content
type OperationType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*OperationType_Transaction
	//	*OperationType_RollBuy
	//	*OperationType_RollSell
	//	*OperationType_ExecutSc
	//	*OperationType_CallSc
	Type isOperationType_Type `protobuf_oneof:"type"`
}

func (x *OperationType) Reset() {
	*x = OperationType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_massa_model_v1_operation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationType) ProtoMessage() {}

func (x *OperationType) ProtoReflect() protoreflect.Message {
	mi := &file_massa_model_v1_operation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationType.ProtoReflect.Descriptor instead.
func (*OperationType) Descriptor() ([]byte, []int) {
	return file_massa_model_v1_operation_proto_rawDescGZIP(), []int{1}
}

func (m *OperationType) GetType() isOperationType_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *OperationType) GetTransaction() *Transaction {
	if x, ok := x.GetType().(*OperationType_Transaction); ok {
		return x.Transaction
	}
	return nil
}

func (x *OperationType) GetRollBuy() *RollBuy {
	if x, ok := x.GetType().(*OperationType_RollBuy); ok {
		return x.RollBuy
	}
	return nil
}

func (x *OperationType) GetRollSell() *RollSell {
	if x, ok := x.GetType().(*OperationType_RollSell); ok {
		return x.RollSell
	}
	return nil
}

func (x *OperationType) GetExecutSc() *ExecuteSC {
	if x, ok := x.GetType().(*OperationType_ExecutSc); ok {
		return x.ExecutSc
	}
	return nil
}

func (x *OperationType) GetCallSc() *CallSC {
	if x, ok := x.GetType().(*OperationType_CallSc); ok {
		return x.CallSc
	}
	return nil
}

type isOperationType_Type interface {
	isOperationType_Type()
}

type OperationType_Transaction struct {
	// Transfer coins from sender to recipient
	Transaction *Transaction `protobuf:"bytes,1,opt,name=transaction,proto3,oneof"`
}

type OperationType_RollBuy struct {
	// The sender buys `roll_count` rolls. Roll price is defined in configuration
	RollBuy *RollBuy `protobuf:"bytes,2,opt,name=roll_buy,json=rollBuy,proto3,oneof"`
}

type OperationType_RollSell struct {
	// The sender sells `roll_count` rolls. Roll price is defined in configuration
	RollSell *RollSell `protobuf:"bytes,3,opt,name=roll_sell,json=rollSell,proto3,oneof"`
}

type OperationType_ExecutSc struct {
	// Execute a smart contract
	ExecutSc *ExecuteSC `protobuf:"bytes,4,opt,name=execut_sc,json=executSc,proto3,oneof"`
}

type OperationType_CallSc struct {
	// Calls an exported function from a stored smart contract
	CallSc *CallSC `protobuf:"bytes,5,opt,name=call_sc,json=callSc,proto3,oneof"`
}

func (*OperationType_Transaction) isOperationType_Type() {}

func (*OperationType_RollBuy) isOperationType_Type() {}

func (*OperationType_RollSell) isOperationType_Type() {}

func (*OperationType_ExecutSc) isOperationType_Type() {}

func (*OperationType_CallSc) isOperationType_Type() {}

// Transfer coins from sender to recipient
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Recipient address
	RecipientAddress string `protobuf:"bytes,1,opt,name=recipient_address,json=recipientAddress,proto3" json:"recipient_address,omitempty"`
	// Amount
	Amount *NativeAmount `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_massa_model_v1_operation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_massa_model_v1_operation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_massa_model_v1_operation_proto_rawDescGZIP(), []int{2}
}

func (x *Transaction) GetRecipientAddress() string {
	if x != nil {
		return x.RecipientAddress
	}
	return ""
}

func (x *Transaction) GetAmount() *NativeAmount {
	if x != nil {
		return x.Amount
	}
	return nil
}

// The sender buys `roll_count` rolls. Roll price is defined in configuration
type RollBuy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Roll count
	RollCount uint64 `protobuf:"varint,1,opt,name=roll_count,json=rollCount,proto3" json:"roll_count,omitempty"`
}

func (x *RollBuy) Reset() {
	*x = RollBuy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_massa_model_v1_operation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollBuy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollBuy) ProtoMessage() {}

func (x *RollBuy) ProtoReflect() protoreflect.Message {
	mi := &file_massa_model_v1_operation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollBuy.ProtoReflect.Descriptor instead.
func (*RollBuy) Descriptor() ([]byte, []int) {
	return file_massa_model_v1_operation_proto_rawDescGZIP(), []int{3}
}

func (x *RollBuy) GetRollCount() uint64 {
	if x != nil {
		return x.RollCount
	}
	return 0
}

// The sender sells `roll_count` rolls. Roll price is defined in configuration
type RollSell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Roll count
	RollCount uint64 `protobuf:"varint,1,opt,name=roll_count,json=rollCount,proto3" json:"roll_count,omitempty"`
}

func (x *RollSell) Reset() {
	*x = RollSell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_massa_model_v1_operation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollSell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollSell) ProtoMessage() {}

func (x *RollSell) ProtoReflect() protoreflect.Message {
	mi := &file_massa_model_v1_operation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollSell.ProtoReflect.Descriptor instead.
func (*RollSell) Descriptor() ([]byte, []int) {
	return file_massa_model_v1_operation_proto_rawDescGZIP(), []int{4}
}

func (x *RollSell) GetRollCount() uint64 {
	if x != nil {
		return x.RollCount
	}
	return 0
}

// Execute a smart contract
type ExecuteSC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Smart contract bytecode.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// The maximum of coins that could be spent by the operation sender
	MaxCoins uint64 `protobuf:"varint,2,opt,name=max_coins,json=maxCoins,proto3" json:"max_coins,omitempty"`
	// The maximum amount of gas that the execution of the contract is allowed to cost
	MaxGas uint64 `protobuf:"varint,3,opt,name=max_gas,json=maxGas,proto3" json:"max_gas,omitempty"`
	// A key-value store associating a hash to arbitrary bytes
	Datastore []*BytesMapFieldEntry `protobuf:"bytes,4,rep,name=datastore,proto3" json:"datastore,omitempty"`
}

func (x *ExecuteSC) Reset() {
	*x = ExecuteSC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_massa_model_v1_operation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteSC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteSC) ProtoMessage() {}

func (x *ExecuteSC) ProtoReflect() protoreflect.Message {
	mi := &file_massa_model_v1_operation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteSC.ProtoReflect.Descriptor instead.
func (*ExecuteSC) Descriptor() ([]byte, []int) {
	return file_massa_model_v1_operation_proto_rawDescGZIP(), []int{5}
}

func (x *ExecuteSC) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExecuteSC) GetMaxCoins() uint64 {
	if x != nil {
		return x.MaxCoins
	}
	return 0
}

func (x *ExecuteSC) GetMaxGas() uint64 {
	if x != nil {
		return x.MaxGas
	}
	return 0
}

func (x *ExecuteSC) GetDatastore() []*BytesMapFieldEntry {
	if x != nil {
		return x.Datastore
	}
	return nil
}

// Calls an exported function from a stored smart contract
type CallSC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target smart contract address
	TargetAddress string `protobuf:"bytes,1,opt,name=target_address,json=targetAddress,proto3" json:"target_address,omitempty"`
	// Target function name. No function is called if empty
	TargetFunction string `protobuf:"bytes,2,opt,name=target_function,json=targetFunction,proto3" json:"target_function,omitempty"`
	// Parameter to pass to the target function
	Parameter []byte `protobuf:"bytes,3,opt,name=parameter,proto3" json:"parameter,omitempty"`
	// The maximum amount of gas that the execution of the contract is allowed to cost
	MaxGas uint64 `protobuf:"varint,4,opt,name=max_gas,json=maxGas,proto3" json:"max_gas,omitempty"`
	// Extra coins that are spent from the caller's balance and transferred to the target
	Coins *NativeAmount `protobuf:"bytes,5,opt,name=coins,proto3" json:"coins,omitempty"`
}

func (x *CallSC) Reset() {
	*x = CallSC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_massa_model_v1_operation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallSC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallSC) ProtoMessage() {}

func (x *CallSC) ProtoReflect() protoreflect.Message {
	mi := &file_massa_model_v1_operation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallSC.ProtoReflect.Descriptor instead.
func (*CallSC) Descriptor() ([]byte, []int) {
	return file_massa_model_v1_operation_proto_rawDescGZIP(), []int{6}
}

func (x *CallSC) GetTargetAddress() string {
	if x != nil {
		return x.TargetAddress
	}
	return ""
}

func (x *CallSC) GetTargetFunction() string {
	if x != nil {
		return x.TargetFunction
	}
	return ""
}

func (x *CallSC) GetParameter() []byte {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *CallSC) GetMaxGas() uint64 {
	if x != nil {
		return x.MaxGas
	}
	return 0
}

func (x *CallSC) GetCoins() *NativeAmount {
	if x != nil {
		return x.Coins
	}
	return nil
}

// Signed operation
type SignedOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation
	Content *Operation `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// A cryptographically generated value using `serialized_data` and a public key.
	Signature string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// The public-key component used in the generation of the signature
	ContentCreatorPubKey string `protobuf:"bytes,3,opt,name=content_creator_pub_key,json=contentCreatorPubKey,proto3" json:"content_creator_pub_key,omitempty"`
	// Derived from the same public key used to generate the signature
	ContentCreatorAddress string `protobuf:"bytes,4,opt,name=content_creator_address,json=contentCreatorAddress,proto3" json:"content_creator_address,omitempty"`
	// A secure hash of the non-malleable contents of a deterministic binary representation of the block header
	SecureHash string `protobuf:"bytes,5,opt,name=secure_hash,json=secureHash,proto3" json:"secure_hash,omitempty"`
	// The size of the serialized operation in bytes
	SerializedSize uint64 `protobuf:"varint,6,opt,name=serialized_size,json=serializedSize,proto3" json:"serialized_size,omitempty"`
}

func (x *SignedOperation) Reset() {
	*x = SignedOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_massa_model_v1_operation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedOperation) ProtoMessage() {}

func (x *SignedOperation) ProtoReflect() protoreflect.Message {
	mi := &file_massa_model_v1_operation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedOperation.ProtoReflect.Descriptor instead.
func (*SignedOperation) Descriptor() ([]byte, []int) {
	return file_massa_model_v1_operation_proto_rawDescGZIP(), []int{7}
}

func (x *SignedOperation) GetContent() *Operation {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *SignedOperation) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *SignedOperation) GetContentCreatorPubKey() string {
	if x != nil {
		return x.ContentCreatorPubKey
	}
	return ""
}

func (x *SignedOperation) GetContentCreatorAddress() string {
	if x != nil {
		return x.ContentCreatorAddress
	}
	return ""
}

func (x *SignedOperation) GetSecureHash() string {
	if x != nil {
		return x.SecureHash
	}
	return ""
}

func (x *SignedOperation) GetSerializedSize() uint64 {
	if x != nil {
		return x.SerializedSize
	}
	return 0
}

// A wrapper around an operation with its metadata
type OperationWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The IDs of the blocks in which the operation appears
	BlockIds []string `protobuf:"bytes,1,rep,name=block_ids,json=blockIds,proto3" json:"block_ids,omitempty"`
	// The thread in which the operation can be included
	Thread uint32 `protobuf:"varint,2,opt,name=thread,proto3" json:"thread,omitempty"`
	// The operation object itself
	Operation *SignedOperation `protobuf:"bytes,3,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *OperationWrapper) Reset() {
	*x = OperationWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_massa_model_v1_operation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationWrapper) ProtoMessage() {}

func (x *OperationWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_massa_model_v1_operation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationWrapper.ProtoReflect.Descriptor instead.
func (*OperationWrapper) Descriptor() ([]byte, []int) {
	return file_massa_model_v1_operation_proto_rawDescGZIP(), []int{8}
}

func (x *OperationWrapper) GetBlockIds() []string {
	if x != nil {
		return x.BlockIds
	}
	return nil
}

func (x *OperationWrapper) GetThread() uint32 {
	if x != nil {
		return x.Thread
	}
	return 0
}

func (x *OperationWrapper) GetOperation() *SignedOperation {
	if x != nil {
		return x.Operation
	}
	return nil
}

// Information about an operation with its metadata
type OperationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the operation.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The IDs of the blocks in which the operation appears
	BlockIds []string `protobuf:"bytes,2,rep,name=block_ids,json=blockIds,proto3" json:"block_ids,omitempty"`
	// The thread in which the operation can be included
	Thread uint32 `protobuf:"varint,3,opt,name=thread,proto3" json:"thread,omitempty"`
}

func (x *OperationInfo) Reset() {
	*x = OperationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_massa_model_v1_operation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationInfo) ProtoMessage() {}

func (x *OperationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_massa_model_v1_operation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationInfo.ProtoReflect.Descriptor instead.
func (*OperationInfo) Descriptor() ([]byte, []int) {
	return file_massa_model_v1_operation_proto_rawDescGZIP(), []int{9}
}

func (x *OperationInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OperationInfo) GetBlockIds() []string {
	if x != nil {
		return x.BlockIds
	}
	return nil
}

func (x *OperationInfo) GetThread() uint32 {
	if x != nil {
		return x.Thread
	}
	return 0
}

// OperationIds
type OperationIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operations ids
	OperationIds []string `protobuf:"bytes,1,rep,name=operation_ids,json=operationIds,proto3" json:"operation_ids,omitempty"`
}

func (x *OperationIds) Reset() {
	*x = OperationIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_massa_model_v1_operation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationIds) ProtoMessage() {}

func (x *OperationIds) ProtoReflect() protoreflect.Message {
	mi := &file_massa_model_v1_operation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationIds.ProtoReflect.Descriptor instead.
func (*OperationIds) Descriptor() ([]byte, []int) {
	return file_massa_model_v1_operation_proto_rawDescGZIP(), []int{10}
}

func (x *OperationIds) GetOperationIds() []string {
	if x != nil {
		return x.OperationIds
	}
	return nil
}

// OpTypes
type OpTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operations types
	OpTypes []OpType `protobuf:"varint,1,rep,packed,name=op_types,json=opTypes,proto3,enum=massa.model.v1.OpType" json:"op_types,omitempty"`
}

func (x *OpTypes) Reset() {
	*x = OpTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_massa_model_v1_operation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpTypes) ProtoMessage() {}

func (x *OpTypes) ProtoReflect() protoreflect.Message {
	mi := &file_massa_model_v1_operation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpTypes.ProtoReflect.Descriptor instead.
func (*OpTypes) Descriptor() ([]byte, []int) {
	return file_massa_model_v1_operation_proto_rawDescGZIP(), []int{11}
}

func (x *OpTypes) GetOpTypes() []OpType {
	if x != nil {
		return x.OpTypes
	}
	return nil
}

var File_massa_model_v1_operation_proto protoreflect.FileDescriptor

var file_massa_model_v1_operation_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0e, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x1a, 0x1b, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6d,
	0x61, 0x73, 0x73, 0x61, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x01, 0x0a, 0x09,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x66, 0x65, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2d,
	0x0a, 0x02, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x73,
	0x73, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x02, 0x6f, 0x70, 0x22, 0xb4, 0x02,
	0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x42, 0x75, 0x79, 0x48, 0x00, 0x52, 0x07, 0x72,
	0x6f, 0x6c, 0x6c, 0x42, 0x75, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x73,
	0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x73, 0x73,
	0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x53,
	0x65, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x53, 0x65, 0x6c, 0x6c, 0x12,
	0x38, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x5f, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x43, 0x48, 0x00, 0x52,
	0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x53, 0x63, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x73,
	0x73, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x53, 0x43, 0x48, 0x00, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x70, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x34, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x28, 0x0a, 0x07, 0x52, 0x6f, 0x6c, 0x6c, 0x42, 0x75,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x6f, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x29, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x6c, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x72, 0x6f, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x09,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x43, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61,
	0x78, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x61, 0x78,
	0x47, 0x61, 0x73, 0x12, 0x40, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x70,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x06, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x43,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6d, 0x61, 0x78, 0x47, 0x61, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x22, 0x9d, 0x02, 0x0a, 0x0f,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x33, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x10,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x61,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x22, 0x33, 0x0a, 0x0c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22,
	0x3c, 0x0a, 0x07, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x6f, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x61, 0x73, 0x73, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2a, 0x94, 0x01,
	0x0a, 0x06, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x50, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x02,
	0x12, 0x15, 0x0a, 0x11, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c,
	0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x43, 0x10, 0x04, 0x12,
	0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f,
	0x53, 0x43, 0x10, 0x05, 0x42, 0x9f, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x73,
	0x73, 0x61, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x33, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x64, 0x61, 0x74, 0x74, 0x73,
	0x2f, 0x67, 0x6f, 0x2d, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x76, 0x31, 0x3b,
	0x76, 0x31, 0xa2, 0x02, 0x06, 0x4d, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0xaa, 0x02, 0x12, 0x43, 0x6f,
	0x6d, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0xba, 0x02, 0x06, 0x4d, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0xca, 0x02, 0x12, 0x43, 0x6f, 0x6d, 0x5c,
	0x4d, 0x61, 0x73, 0x73, 0x61, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x5c, 0x56, 0x31, 0xea, 0x02,
	0x15, 0x43, 0x6f, 0x6d, 0x3a, 0x3a, 0x4d, 0x61, 0x73, 0x73, 0x61, 0x3a, 0x3a, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_massa_model_v1_operation_proto_rawDescOnce sync.Once
	file_massa_model_v1_operation_proto_rawDescData = file_massa_model_v1_operation_proto_rawDesc
)

func file_massa_model_v1_operation_proto_rawDescGZIP() []byte {
	file_massa_model_v1_operation_proto_rawDescOnce.Do(func() {
		file_massa_model_v1_operation_proto_rawDescData = protoimpl.X.CompressGZIP(file_massa_model_v1_operation_proto_rawDescData)
	})
	return file_massa_model_v1_operation_proto_rawDescData
}

var file_massa_model_v1_operation_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_massa_model_v1_operation_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_massa_model_v1_operation_proto_goTypes = []interface{}{
	(OpType)(0),                // 0: massa.model.v1.OpType
	(*Operation)(nil),          // 1: massa.model.v1.Operation
	(*OperationType)(nil),      // 2: massa.model.v1.OperationType
	(*Transaction)(nil),        // 3: massa.model.v1.Transaction
	(*RollBuy)(nil),            // 4: massa.model.v1.RollBuy
	(*RollSell)(nil),           // 5: massa.model.v1.RollSell
	(*ExecuteSC)(nil),          // 6: massa.model.v1.ExecuteSC
	(*CallSC)(nil),             // 7: massa.model.v1.CallSC
	(*SignedOperation)(nil),    // 8: massa.model.v1.SignedOperation
	(*OperationWrapper)(nil),   // 9: massa.model.v1.OperationWrapper
	(*OperationInfo)(nil),      // 10: massa.model.v1.OperationInfo
	(*OperationIds)(nil),       // 11: massa.model.v1.OperationIds
	(*OpTypes)(nil),            // 12: massa.model.v1.OpTypes
	(*NativeAmount)(nil),       // 13: massa.model.v1.NativeAmount
	(*BytesMapFieldEntry)(nil), // 14: massa.model.v1.BytesMapFieldEntry
}
var file_massa_model_v1_operation_proto_depIdxs = []int32{
	13, // 0: massa.model.v1.Operation.fee:type_name -> massa.model.v1.NativeAmount
	2,  // 1: massa.model.v1.Operation.op:type_name -> massa.model.v1.OperationType
	3,  // 2: massa.model.v1.OperationType.transaction:type_name -> massa.model.v1.Transaction
	4,  // 3: massa.model.v1.OperationType.roll_buy:type_name -> massa.model.v1.RollBuy
	5,  // 4: massa.model.v1.OperationType.roll_sell:type_name -> massa.model.v1.RollSell
	6,  // 5: massa.model.v1.OperationType.execut_sc:type_name -> massa.model.v1.ExecuteSC
	7,  // 6: massa.model.v1.OperationType.call_sc:type_name -> massa.model.v1.CallSC
	13, // 7: massa.model.v1.Transaction.amount:type_name -> massa.model.v1.NativeAmount
	14, // 8: massa.model.v1.ExecuteSC.datastore:type_name -> massa.model.v1.BytesMapFieldEntry
	13, // 9: massa.model.v1.CallSC.coins:type_name -> massa.model.v1.NativeAmount
	1,  // 10: massa.model.v1.SignedOperation.content:type_name -> massa.model.v1.Operation
	8,  // 11: massa.model.v1.OperationWrapper.operation:type_name -> massa.model.v1.SignedOperation
	0,  // 12: massa.model.v1.OpTypes.op_types:type_name -> massa.model.v1.OpType
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_massa_model_v1_operation_proto_init() }
func file_massa_model_v1_operation_proto_init() {
	if File_massa_model_v1_operation_proto != nil {
		return
	}
	file_massa_model_v1_amount_proto_init()
	file_massa_model_v1_commons_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_massa_model_v1_operation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_massa_model_v1_operation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_massa_model_v1_operation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_massa_model_v1_operation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollBuy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_massa_model_v1_operation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollSell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_massa_model_v1_operation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteSC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_massa_model_v1_operation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallSC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_massa_model_v1_operation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_massa_model_v1_operation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_massa_model_v1_operation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_massa_model_v1_operation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_massa_model_v1_operation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_massa_model_v1_operation_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*OperationType_Transaction)(nil),
		(*OperationType_RollBuy)(nil),
		(*OperationType_RollSell)(nil),
		(*OperationType_ExecutSc)(nil),
		(*OperationType_CallSc)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_massa_model_v1_operation_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_massa_model_v1_operation_proto_goTypes,
		DependencyIndexes: file_massa_model_v1_operation_proto_depIdxs,
		EnumInfos:         file_massa_model_v1_operation_proto_enumTypes,
		MessageInfos:      file_massa_model_v1_operation_proto_msgTypes,
	}.Build()
	File_massa_model_v1_operation_proto = out.File
	file_massa_model_v1_operation_proto_rawDesc = nil
	file_massa_model_v1_operation_proto_goTypes = nil
	file_massa_model_v1_operation_proto_depIdxs = nil
}
